
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\007\000\002\006\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\015\000\002\010\011\000\002\011\012\000\002\022\004" +
    "\000\002\022\003\000\002\023\011\000\002\026\004\000" +
    "\002\026\005\000\002\024\002\000\002\024\007\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\017\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\012\011\000\002" +
    "\013\015\000\002\027\005\000\002\030\007\000\002\030" +
    "\007\000\002\015\004\000\002\015\003\000\002\014\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\010\004\012\005\010\006\011\001\002\000" +
    "\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd\012\ufffd\020\ufffd" +
    "\022\ufffd\045\ufffd\046\ufffd\001\002\000\024\002\000\004" +
    "\012\005\010\006\011\012\051\020\043\022\045\045\036" +
    "\046\037\001\002\000\004\002\035\001\002\000\004\012" +
    "\013\001\002\000\004\012\ufffa\001\002\000\004\012\ufff9" +
    "\001\002\000\004\012\ufffb\001\002\000\004\007\033\001" +
    "\002\000\006\010\015\011\016\001\002\000\024\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\012\ufffc\020\ufffc\022\ufffc\045" +
    "\ufffc\046\ufffc\001\002\000\004\012\017\001\002\000\004" +
    "\007\020\001\002\000\010\012\021\013\022\014\023\001" +
    "\002\000\016\010\uffcd\011\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\001\002\000\016\010\uffcf\011\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\001\002\000\016\010\uffce\011\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\001\002\000\016\010" +
    "\ufff8\011\ufff8\034\025\035\027\036\026\037\030\001\002" +
    "\000\010\012\uffcc\013\uffcc\014\uffcc\001\002\000\010\012" +
    "\uffca\013\uffca\014\uffca\001\002\000\010\012\uffcb\013\uffcb" +
    "\014\uffcb\001\002\000\010\012\uffc9\013\uffc9\014\uffc9\001" +
    "\002\000\010\012\021\013\022\014\023\001\002\000\016" +
    "\010\uffd0\011\uffd0\034\025\035\027\036\026\037\030\001" +
    "\002\000\010\012\021\013\022\014\023\001\002\000\016" +
    "\010\ufff7\011\ufff7\034\025\035\027\036\026\037\030\001" +
    "\002\000\004\002\001\001\002\000\004\040\165\001\002" +
    "\000\004\040\144\001\002\000\024\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\012\ufffe\020\ufffe\022\ufffe\045\ufffe\046\ufffe" +
    "\001\002\000\030\002\uffd3\004\uffd3\005\uffd3\006\uffd3\012" +
    "\uffd3\020\uffd3\022\uffd3\025\uffd3\043\uffd3\045\uffd3\046\uffd3" +
    "\001\002\000\030\002\uffd4\004\uffd4\005\uffd4\006\uffd4\012" +
    "\uffd4\020\uffd4\022\uffd4\025\uffd4\043\uffd4\045\uffd4\046\uffd4" +
    "\001\002\000\004\040\115\001\002\000\030\002\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\012\uffd2\020\uffd2\022\uffd2\025\uffd2" +
    "\043\uffd2\045\uffd2\046\uffd2\001\002\000\004\040\055\001" +
    "\002\000\024\002\uffff\004\uffff\005\uffff\006\uffff\012\uffff" +
    "\020\uffff\022\uffff\045\uffff\046\uffff\001\002\000\030\002" +
    "\uffd1\004\uffd1\005\uffd1\006\uffd1\012\uffd1\020\uffd1\022\uffd1" +
    "\025\uffd1\043\uffd1\045\uffd1\046\uffd1\001\002\000\004\010" +
    "\054\001\002\000\004\007\052\001\002\000\010\012\021" +
    "\013\022\014\023\001\002\000\014\010\uffda\034\025\035" +
    "\027\036\026\037\030\001\002\000\030\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\012\uffd5\020\uffd5\022\uffd5\025\uffd5\043" +
    "\uffd5\045\uffd5\046\uffd5\001\002\000\004\012\056\001\002" +
    "\000\004\041\057\001\002\000\004\042\060\001\002\000" +
    "\004\023\064\001\002\000\010\023\064\024\105\043\uffea" +
    "\001\002\000\010\023\uffee\024\uffee\043\uffee\001\002\000" +
    "\006\023\074\044\073\001\002\000\014\012\065\013\067" +
    "\014\070\015\066\016\072\001\002\000\006\023\uffe4\044" +
    "\uffe4\001\002\000\006\023\uffe6\044\uffe6\001\002\000\006" +
    "\023\uffe8\044\uffe8\001\002\000\006\023\uffe7\044\uffe7\001" +
    "\002\000\006\023\uffec\044\uffec\001\002\000\006\023\uffe5" +
    "\044\uffe5\001\002\000\004\042\076\001\002\000\014\012" +
    "\065\013\067\014\070\015\066\016\072\001\002\000\006" +
    "\023\uffeb\044\uffeb\001\002\000\014\012\051\020\043\022" +
    "\045\045\036\046\037\001\002\000\020\012\uffd6\020\uffd6" +
    "\022\uffd6\025\uffd6\043\uffd6\045\uffd6\046\uffd6\001\002\000" +
    "\016\012\051\020\043\022\045\025\102\045\036\046\037" +
    "\001\002\000\020\012\uffd7\020\uffd7\022\uffd7\025\uffd7\043" +
    "\uffd7\045\uffd7\046\uffd7\001\002\000\004\010\103\001\002" +
    "\000\004\043\104\001\002\000\010\023\uffed\024\uffed\043" +
    "\uffed\001\002\000\004\044\111\001\002\000\004\043\110" +
    "\001\002\000\010\023\uffef\024\uffef\043\uffef\001\002\000" +
    "\030\002\ufff0\004\ufff0\005\ufff0\006\ufff0\012\ufff0\020\ufff0" +
    "\022\ufff0\025\ufff0\043\ufff0\045\ufff0\046\ufff0\001\002\000" +
    "\004\042\112\001\002\000\014\012\051\020\043\022\045" +
    "\045\036\046\037\001\002\000\016\012\051\020\043\022" +
    "\045\043\114\045\036\046\037\001\002\000\004\043\uffe9" +
    "\001\002\000\004\012\116\001\002\000\016\026\131\027" +
    "\132\030\134\031\133\032\135\033\136\001\002\000\004" +
    "\041\120\001\002\000\004\042\121\001\002\000\014\012" +
    "\051\020\043\022\045\045\036\046\037\001\002\000\016" +
    "\012\051\020\043\022\045\043\123\045\036\046\037\001" +
    "\002\000\032\002\ufff1\004\ufff1\005\ufff1\006\ufff1\012\ufff1" +
    "\020\ufff1\021\124\022\ufff1\025\ufff1\043\ufff1\045\ufff1\046" +
    "\ufff1\001\002\000\004\042\125\001\002\000\014\012\051" +
    "\020\043\022\045\045\036\046\037\001\002\000\016\012" +
    "\051\020\043\022\045\043\127\045\036\046\037\001\002" +
    "\000\030\002\ufff2\004\ufff2\005\ufff2\006\ufff2\012\ufff2\020" +
    "\ufff2\022\ufff2\025\ufff2\043\ufff2\045\ufff2\046\ufff2\001\002" +
    "\000\012\013\141\014\142\015\140\016\143\001\002\000" +
    "\012\013\uffe2\014\uffe2\015\uffe2\016\uffe2\001\002\000\012" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\001\002\000\012\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\001\002\000\012\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\001\002\000\012\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\001\002\000\012\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\001\002\000\006\010\uffe3\041\uffe3\001" +
    "\002\000\006\010\ufff4\041\ufff4\001\002\000\006\010\ufff6" +
    "\041\ufff6\001\002\000\006\010\ufff5\041\ufff5\001\002\000" +
    "\006\010\ufff3\041\ufff3\001\002\000\004\012\051\001\002" +
    "\000\004\010\146\001\002\000\004\012\116\001\002\000" +
    "\004\010\150\001\002\000\004\012\151\001\002\000\004" +
    "\007\157\001\002\000\004\041\153\001\002\000\004\042" +
    "\154\001\002\000\014\012\051\020\043\022\045\045\036" +
    "\046\037\001\002\000\016\012\051\020\043\022\045\043" +
    "\156\045\036\046\037\001\002\000\030\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\012\uffdb\020\uffdb\022\uffdb\025\uffdb\043" +
    "\uffdb\045\uffdb\046\uffdb\001\002\000\004\012\160\001\002" +
    "\000\006\034\161\035\162\001\002\000\004\013\164\001" +
    "\002\000\004\013\163\001\002\000\004\041\uffd8\001\002" +
    "\000\004\041\uffd9\001\002\000\004\012\116\001\002\000" +
    "\004\041\167\001\002\000\004\042\170\001\002\000\014" +
    "\012\051\020\043\022\045\045\036\046\037\001\002\000" +
    "\016\012\051\020\043\022\045\043\172\045\036\046\037" +
    "\001\002\000\030\002\uffdc\004\uffdc\005\uffdc\006\uffdc\012" +
    "\uffdc\020\uffdc\022\uffdc\025\uffdc\043\uffdc\045\uffdc\046\uffdc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\012\002\005\003\004\004\003\005\006\001" +
    "\001\000\002\001\001\000\022\004\045\005\006\010\041" +
    "\011\040\012\043\013\046\014\037\027\047\001\001\000" +
    "\002\001\001\000\004\006\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\031\001\001\000\004\021\030" +
    "\001\001\000\004\016\033\001\001\000\004\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\052\001\001\000\004\021\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\060\023\061\026\062\001\001" +
    "\000\010\023\106\024\105\026\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\074\001\001\000\002\001\001\000\020\010" +
    "\041\011\040\012\043\013\046\014\076\015\077\027\047" +
    "\001\001\000\002\001\001\000\016\010\041\011\040\012" +
    "\043\013\046\014\100\027\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\041\011\040\012" +
    "\043\013\046\014\076\015\112\027\047\001\001\000\016" +
    "\010\041\011\040\012\043\013\046\014\100\027\047\001" +
    "\001\000\002\001\001\000\004\017\116\001\001\000\004" +
    "\020\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\041\011\040\012\043\013\046\014\076\015\121" +
    "\027\047\001\001\000\016\010\041\011\040\012\043\013" +
    "\046\014\100\027\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\041\011\040\012\043\013\046\014" +
    "\076\015\125\027\047\001\001\000\016\010\041\011\040" +
    "\012\043\013\046\014\100\027\047\001\001\000\002\001" +
    "\001\000\004\007\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\144\001\001\000\002\001\001\000\004\017\146" +
    "\001\001\000\002\001\001\000\004\030\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\041\011\040\012\043\013\046\014\076\015\154\027" +
    "\047\001\001\000\016\010\041\011\040\012\043\013\046" +
    "\014\100\027\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\041" +
    "\011\040\012\043\013\046\014\076\015\170\027\047\001" +
    "\001\000\016\010\041\011\040\012\043\013\046\014\100" +
    "\027\047\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String[] args) throws Exception {
        AnalisadorSintatico parser = new AnalisadorSintatico(
            new AnalisadorLexico(new java.io.FileReader("teste.txt"))
        );
        parser.parse();
        System.out.println("✓ Código válido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decls ::= decls decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= decls comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= tipo lista_ids PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_ids ::= lista_ids VIRG IDENTIFICADOR IGUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ids",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_ids ::= IDENTIFICADOR IGUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ids",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor ::= NUM_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valor ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valor ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comando_if ::= IF ABRE_PAREN condicao FECHA_PAREN ABRE_CHAVE comandos FECHA_CHAVE ELSE ABRE_CHAVE comandos FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando_if ::= IF ABRE_PAREN condicao FECHA_PAREN ABRE_CHAVE comandos FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comando_switch ::= SWITCH ABRE_PAREN IDENTIFICADOR FECHA_PAREN ABRE_CHAVE casos default_opt FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_switch",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // casos ::= casos caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // caso ::= mult_casos DOIS_PONTOS ABRE_CHAVE comandos BREAK PVIRG FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mult_casos ::= CASE constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mult_casos ::= mult_casos CASE constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // default_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // default_opt ::= DEFAULT DOIS_PONTOS ABRE_CHAVE comandos FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constante ::= NUM_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constante ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constante ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constante ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // constante ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicao ::= IDENTIFICADOR op_rel valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_rel ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_rel ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_rel ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_rel ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_rel ::= MAIOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_rel ::= MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando_while ::= WHILE ABRE_PAREN condicao FECHA_PAREN ABRE_CHAVE comandos FECHA_CHAVE 
            {
              Object RESULT =null;
		 System.out.println("Reconhecido: WHILE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando_for ::= FOR ABRE_PAREN atribuicao PVIRG condicao PVIRG incremento FECHA_PAREN ABRE_CHAVE comandos FECHA_CHAVE 
            {
              Object RESULT =null;
		 System.out.println("Reconhecido: FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atribuicao ::= IDENTIFICADOR IGUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // incremento ::= IDENTIFICADOR IGUAL IDENTIFICADOR MAIS NUM_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // incremento ::= IDENTIFICADOR IGUAL IDENTIFICADOR MENOS NUM_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comandos ::= comandos comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comandos ::= comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando ::= atribuicao PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando ::= comando_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comando ::= comando_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando ::= comando_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando ::= comando_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr op_arit expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= NUM_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_arit ::= MAIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_arit",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op_arit ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_arit",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op_arit ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_arit",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op_arit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_arit",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
